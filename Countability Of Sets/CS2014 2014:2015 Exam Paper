CS2014 2014/2015 Exam Paper 
https://www.tcd.ie/academicregistry/exams/assets/local/past-papers2014/CS/CS20142.pdf
Question 2. 
					Insertion	Checking	Removal
Using a linked list	  O(N)		  O(N)		  O(N)
Balanced Binary Tree  O(logN)	  O(logN)	  O(logN)
Hash Tables			  O(1)		  O(1)		  O(1)  	- Not appropriate as memory is limited

Using a bitset 		  O(1)	      O(1) 		  O(1)

Bitset Solution

							(L*N)-1
0____________________________#V-1
_____________________________|
#V = total number of spaces in car park = L * N

Given a level number and space number, map that to a unique value in range 0...(L*N)-1

level_num_minus_one
space_num_minus_one 

Question 3.

struct myString{
	struct node * head;
};

struct node {
	char c;
	struct node * next;
};

//create new empty string 

struct mystring * newString(){
	struct myString * p;
	p = malloc(sizeof(struct mystring));
	p -> head = NULL;
	return p;
}

struct myString * stringConvert(char * c){
	struct myString * p;
	p = new_string();
	struct node * lastnode;
	lastnode = NULL;

	for(int i = 0; str[i] != '\0';i++){
		struct node * charNode;
		charNode = malloc(sizeof(struct node));
		charNode -> c = str[i];
		charNode -> next = NULL;

		if(lastnode == NULL){
			p -> head = charNode;
		}else{
			lastnode -> next = charnode;
		}

		lastnode = charNode;

	}
	return p;
}



CS2014 2015/2016 Exam Paper 
https://www.tcd.ie/academicregistry/exams/assets/local/past-papers2016/CS/CS2014-2.PDF
Question 2
		______________
key -> |hash function|

\\hash function for string 

int hash(char * str,int table_size){
	int hash = 0;

	for(int i = 0; str[i] != '\0';i++){
		hash = hash * PRIME + str[i];
	}

	return hash % table_size;
}


